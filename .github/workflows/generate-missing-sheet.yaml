name: Generate Missing Cheatsheet

on:
  repository_dispatch:
    types: [generate-missing-cheatsheet]

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Find missing cheatsheets
        id: find_missing
        run: |
          cheatsheets=$(awk '/const cheatsheets = \[/, /\]/{ print }' core.js \
            | grep -v '//NEW-CHEATSHEET' \
            | grep -o '"[^\"]\+"' \
            | sed 's/"//g')

          missing=""
          for sheet in $cheatsheets; do
            file="cheatsheets/${sheet}.html"
            if [ ! -f "$file" ]; then
              missing=$sheet
              break
            fi
          done

          echo "missing=$missing" >> $GITHUB_OUTPUT

          - name: Call OpenAI API to generate HTML
          id: generate_html
          run: |
            # Check if missing is empty
            if [ -z "${{ steps.find_missing.outputs.missing }}" ]; then
              echo "No missing cheatsheets found!"
              exit 0
            fi
            
            topic="${{ steps.find_missing.outputs.missing }}"
            echo "Generating cheatsheet for topic: $topic"
            
            # Create a more robust API call
            cat > payload.json <<EOF
            {
            "model": "gpt-4",
            "messages": [
                {
                "role": "system",
                "content": "You are an expert at creating concise, information-dense cheat sheets. Create only valid HTML with Tailwind CSS classes. Do not include any markdown or explanation - ONLY the HTML content."
                },
                {
                "role": "user",
                "content": "Generate a dense, printable, Tailwind-styled HTML cheat sheet for: $topic. Include common commands, syntax, and best practices."
                }
            ],
            "temperature": 0.7
            }
            EOF

            response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload.json)

            
            # Debug the API response
            echo "API Response:"
            echo "$response" | head -n 30
            
            # Extract content more carefully
            html=$(echo "$response" | jq -r '.choices[0].text')
            
            # Check if extraction succeeded
            if [ -z "$html" ] || [ "$html" = "null" ]; then
              echo "Failed to extract HTML content from API response"
              echo "Full response: $response"
              exit 1
            fi
            
            # Save to file and verify
            echo "$html" > "cheatsheets/$topic.html"
            echo "Content saved to cheatsheets/$topic.html"
            ls -la "cheatsheets/$topic.html"
      - name: Create and push PR branch
        run: |
          branch="feature/add-${{ steps.find_missing.outputs.missing }}"
          git checkout -b $branch
          git add cheatsheets/${{ steps.find_missing.outputs.missing }}.html
          git commit -m "Add cheat sheet: ${{ steps.find_missing.outputs.missing }}"
          git remote set-url origin "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git"
          git push origin $branch

          GH_TOKEN=${{ secrets.GH_PAT }} gh pr create \
            --base main \
            --head $branch \
            --title "Add cheat sheet: ${{ steps.find_missing.outputs.missing }}" \
            --body "This PR adds the generated cheat sheet for ${{ steps.find_missing.outputs.missing }}."
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
